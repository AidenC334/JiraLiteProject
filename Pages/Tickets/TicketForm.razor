@page "/tickets/new"
@page "/tickets/edit/{TicketId:int}"
@inject BugTracker.Services.ITicketService TicketService
@inject BugTracker.Services.IProjectService ProjectService
@inject BugTracker.Services.IUserService UserService
@inject NavigationManager Navigation

<h3>@(IsEdit ? "Edit Ticket" : "New Ticket")</h3>

@if (isLoading)
{
    <p><em>Loading...</em></p>
}
else if (ticket == null)
{
    <p><em>Ticket not found.</em></p>
}
else
{
    <EditForm Model="ticket" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="title" class="form-label">Title</label>
            <InputText id="title" class="form-control" @bind-value="ticket.Title" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-value="ticket.Description" />
        </div>

        <div class="mb-3">
            <label for="project" class="form-label">Project</label>
            <InputSelect id="project" class="form-select" @bind-value="ticket.ProjectId">
                <option value="">-- Select Project --</option>
                @foreach (var proj in projects)
                {
                    <option value="@proj.Id">@proj.Name</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="priority" class="form-label">Priority</label>
            <InputSelect id="priority" class="form-select" @bind-Value="ticket.Priority">
                @foreach (var p in Enum.GetValues(typeof(BugTracker.Models.Enums.TicketPriority)).Cast<BugTracker.Models.Enums.TicketPriority>())
                {
                    <option value="@p">@p</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="status" class="form-label">Status</label>
            <InputSelect id="status" class="form-select" @bind-Value="ticket.Status">
                @foreach (var s in Enum.GetValues(typeof(BugTracker.Models.Enums.TicketStatus)).Cast<BugTracker.Models.Enums.TicketStatus>())
                {
                    <option value="@s">@s</option>
                }
            </InputSelect>
        </div>

        <div class="mb-3">
            <label for="assignedUser" class="form-label">Assign To</label>
            <InputSelect id="assignedUser" class="form-select" @bind-Value="ticket.AssignedUserId">
                <option value="">-- Unassigned --</option>
                @foreach (var user in users)
                {
                    <option value="@user.Id">@user.UserName</option>
                }
            </InputSelect>
        </div>

        <button type="submit" class="btn btn-primary">@ (IsEdit ? "Update" : "Create")</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int? TicketId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public int? ProjectId { get; set; }

    private BugTracker.Models.Ticket? ticket;
    private List<BugTracker.Models.Project> projects = new();
    private List<BugTracker.Models.ApplicationUser> users = new();
    private bool isLoading = true;

    private bool IsEdit => TicketId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetAllAsync();
        users = await UserService.GetAllUsersAsync();

        if (IsEdit)
        {
            ticket = await TicketService.GetByIdAsync(TicketId.Value);
            if (ticket == null)
            {
                isLoading = false;
                return;
            }
        }
        else
        {
            ticket = new BugTracker.Models.Ticket
            {
                ProjectId = ProjectId ?? 0,
                Priority = BugTracker.Models.Enums.TicketPriority.Medium,
                Status = BugTracker.Models.Enums.TicketStatus.Todo
            };
        }

        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        if (ticket == null)
            return;

        if (IsEdit)
        {
            await TicketService.UpdateAsync(ticket);
        }
        else
        {
            await TicketService.CreateAsync(ticket);
        }

        Navigation.NavigateTo($"/projects/{ticket.ProjectId}");
    }

    private void Cancel()
    {
        if (ticket != null)
        {
            Navigation.NavigateTo($"/projects/{ticket.ProjectId}");
        }
