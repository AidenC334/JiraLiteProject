@page "/projects/new"
@page "/projects/edit/{ProjectId:int}"
@inject BugTracker.Services.IProjectService ProjectService
@inject NavigationManager Navigation

<h3>@(IsEdit ? "Edit Project" : "New Project")</h3>

@if (project == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <EditForm Model="project" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <InputText id="name" class="form-control" @bind-value="project.Name" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-value="project.Description" />
        </div>

        <button type="submit" class="btn btn-primary">@ (IsEdit ? "Update" : "Create")</button>
        <button type="button" class="btn btn-secondary ms-2" @onclick="Cancel">Cancel</button>
    </EditForm>
}

@code {
    [Parameter]
    public int? ProjectId { get; set; }

    private BugTracker.Models.Project? project;

    private bool IsEdit => ProjectId.HasValue;

    protected override async Task OnInitializedAsync()
    {
        if (IsEdit)
        {
            project = await ProjectService.GetByIdAsync(ProjectId.Value);
            if (project == null)
            {
                // Project not found, navigate back
                Navigation.NavigateTo("/projects");
            }
        }
        else
        {
            project = new BugTracker.Models.Project();
        }
    }

    private async Task HandleValidSubmit()
    {
        if (project == null) return;

        if (IsEdit)
        {
            await ProjectService.UpdateAsync(project);
        }
        else
        {
            await ProjectService.CreateAsync(project);
        }

        Navigation.NavigateTo("/projects");
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/projects");
    }
}
