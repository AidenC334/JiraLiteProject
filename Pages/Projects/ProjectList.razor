@page "/projects"
@inject BugTracker.Services.IProjectService ProjectService
@inject NavigationManager Navigation

<h3>Projects</h3>

<button class="btn btn-primary mb-3" @onclick="CreateNew">New Project</button>

@if (projects == null)
{
    <p><em>Loading...</em></p>
}
else if (!projects.Any())
{
    <p>No projects found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Name</th>
                <th>Description</th>
                <th>Tickets</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var project in projects)
            {
                <tr>
                    <td>@project.Name</td>
                    <td>@project.Description</td>
                    <td>@project.Tickets?.Count ?? 0</td>
                    <td>
                        <button class="btn btn-sm btn-info me-2" @onclick="() => ViewDetails(project.Id)">Details</button>
                        <button class="btn btn-sm btn-warning me-2" @onclick="() => EditProject(project.Id)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => DeleteProject(project.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<BugTracker.Models.Project>? projects;

    protected override async Task OnInitializedAsync()
    {
        projects = await ProjectService.GetAllAsync();
    }

    void CreateNew()
    {
        Navigation.NavigateTo("/projects/new");
    }

    void ViewDetails(int id)
    {
        Navigation.NavigateTo($"/projects/{id}");
    }

    void EditProject(int id)
    {
        Navigation.NavigateTo($"/projects/edit/{id}");
    }

    async Task DeleteProject(int id)
    {
        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure you want to delete project #{id}?");
        if (confirmed)
        {
            await ProjectService.DeleteAsync(id);
            projects = await ProjectService.GetAllAsync();  // refresh list
            StateHasChanged();
        }
    }

    [Inject] private IJSRuntime JS { get; set; } = default!;
}
